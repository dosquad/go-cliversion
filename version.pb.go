// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: github.com/dosquad/go-cliversion/version.proto

package cliversion

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VersionInfo struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Bld *BuildInfo             `protobuf:"bytes,1,opt,name=bld,json=build"`
	xxx_hidden_Git *GitInfo               `protobuf:"bytes,2,opt,name=git"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	mi := &file_github_com_dosquad_go_cliversion_version_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dosquad_go_cliversion_version_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VersionInfo) GetBld() *BuildInfo {
	if x != nil {
		return x.xxx_hidden_Bld
	}
	return nil
}

func (x *VersionInfo) GetGit() *GitInfo {
	if x != nil {
		return x.xxx_hidden_Git
	}
	return nil
}

func (x *VersionInfo) SetBld(v *BuildInfo) {
	x.xxx_hidden_Bld = v
}

func (x *VersionInfo) SetGit(v *GitInfo) {
	x.xxx_hidden_Git = v
}

func (x *VersionInfo) HasBld() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Bld != nil
}

func (x *VersionInfo) HasGit() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Git != nil
}

func (x *VersionInfo) ClearBld() {
	x.xxx_hidden_Bld = nil
}

func (x *VersionInfo) ClearGit() {
	x.xxx_hidden_Git = nil
}

type VersionInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Bld *BuildInfo
	Git *GitInfo
}

func (b0 VersionInfo_builder) Build() *VersionInfo {
	m0 := &VersionInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Bld = b.Bld
	x.xxx_hidden_Git = b.Git
	return m0
}

type BuildInfo struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Debug       bool                   `protobuf:"varint,1,opt,name=debug"`
	xxx_hidden_Method      *string                `protobuf:"bytes,2,opt,name=method"`
	xxx_hidden_Date        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date"`
	xxx_hidden_Version     *string                `protobuf:"bytes,4,opt,name=version"`
	xxx_hidden_GoVersion   *string                `protobuf:"bytes,5,opt,name=go_version"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BuildInfo) Reset() {
	*x = BuildInfo{}
	mi := &file_github_com_dosquad_go_cliversion_version_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfo) ProtoMessage() {}

func (x *BuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dosquad_go_cliversion_version_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BuildInfo) GetDebug() bool {
	if x != nil {
		return x.xxx_hidden_Debug
	}
	return false
}

func (x *BuildInfo) GetMethod() string {
	if x != nil {
		if x.xxx_hidden_Method != nil {
			return *x.xxx_hidden_Method
		}
		return ""
	}
	return ""
}

func (x *BuildInfo) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Date
	}
	return nil
}

func (x *BuildInfo) GetVersion() string {
	if x != nil {
		if x.xxx_hidden_Version != nil {
			return *x.xxx_hidden_Version
		}
		return ""
	}
	return ""
}

func (x *BuildInfo) GetGoVersion() string {
	if x != nil {
		if x.xxx_hidden_GoVersion != nil {
			return *x.xxx_hidden_GoVersion
		}
		return ""
	}
	return ""
}

func (x *BuildInfo) SetDebug(v bool) {
	x.xxx_hidden_Debug = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *BuildInfo) SetMethod(v string) {
	x.xxx_hidden_Method = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *BuildInfo) SetDate(v *timestamppb.Timestamp) {
	x.xxx_hidden_Date = v
}

func (x *BuildInfo) SetVersion(v string) {
	x.xxx_hidden_Version = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *BuildInfo) SetGoVersion(v string) {
	x.xxx_hidden_GoVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *BuildInfo) HasDebug() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BuildInfo) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BuildInfo) HasDate() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Date != nil
}

func (x *BuildInfo) HasVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BuildInfo) HasGoVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *BuildInfo) ClearDebug() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Debug = false
}

func (x *BuildInfo) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Method = nil
}

func (x *BuildInfo) ClearDate() {
	x.xxx_hidden_Date = nil
}

func (x *BuildInfo) ClearVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Version = nil
}

func (x *BuildInfo) ClearGoVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_GoVersion = nil
}

type BuildInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Debug     *bool
	Method    *string
	Date      *timestamppb.Timestamp
	Version   *string
	GoVersion *string
}

func (b0 BuildInfo_builder) Build() *BuildInfo {
	m0 := &BuildInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Debug != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Debug = *b.Debug
	}
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Method = b.Method
	}
	x.xxx_hidden_Date = b.Date
	if b.Version != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Version = b.Version
	}
	if b.GoVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_GoVersion = b.GoVersion
	}
	return m0
}

type GitInfo struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Repo        *string                `protobuf:"bytes,1,opt,name=repo"`
	xxx_hidden_Slug        *string                `protobuf:"bytes,2,opt,name=slug"`
	xxx_hidden_Commit      *string                `protobuf:"bytes,3,opt,name=commit"`
	xxx_hidden_Tag         *string                `protobuf:"bytes,4,opt,name=tag"`
	xxx_hidden_ExactTag    *string                `protobuf:"bytes,5,opt,name=exact_tag"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GitInfo) Reset() {
	*x = GitInfo{}
	mi := &file_github_com_dosquad_go_cliversion_version_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitInfo) ProtoMessage() {}

func (x *GitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dosquad_go_cliversion_version_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GitInfo) GetRepo() string {
	if x != nil {
		if x.xxx_hidden_Repo != nil {
			return *x.xxx_hidden_Repo
		}
		return ""
	}
	return ""
}

func (x *GitInfo) GetSlug() string {
	if x != nil {
		if x.xxx_hidden_Slug != nil {
			return *x.xxx_hidden_Slug
		}
		return ""
	}
	return ""
}

func (x *GitInfo) GetCommit() string {
	if x != nil {
		if x.xxx_hidden_Commit != nil {
			return *x.xxx_hidden_Commit
		}
		return ""
	}
	return ""
}

func (x *GitInfo) GetTag() string {
	if x != nil {
		if x.xxx_hidden_Tag != nil {
			return *x.xxx_hidden_Tag
		}
		return ""
	}
	return ""
}

func (x *GitInfo) GetExactTag() string {
	if x != nil {
		if x.xxx_hidden_ExactTag != nil {
			return *x.xxx_hidden_ExactTag
		}
		return ""
	}
	return ""
}

func (x *GitInfo) SetRepo(v string) {
	x.xxx_hidden_Repo = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *GitInfo) SetSlug(v string) {
	x.xxx_hidden_Slug = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *GitInfo) SetCommit(v string) {
	x.xxx_hidden_Commit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *GitInfo) SetTag(v string) {
	x.xxx_hidden_Tag = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *GitInfo) SetExactTag(v string) {
	x.xxx_hidden_ExactTag = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *GitInfo) HasRepo() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GitInfo) HasSlug() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *GitInfo) HasCommit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *GitInfo) HasTag() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *GitInfo) HasExactTag() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *GitInfo) ClearRepo() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Repo = nil
}

func (x *GitInfo) ClearSlug() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Slug = nil
}

func (x *GitInfo) ClearCommit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Commit = nil
}

func (x *GitInfo) ClearTag() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Tag = nil
}

func (x *GitInfo) ClearExactTag() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ExactTag = nil
}

type GitInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Repo     *string
	Slug     *string
	Commit   *string
	Tag      *string
	ExactTag *string
}

func (b0 GitInfo_builder) Build() *GitInfo {
	m0 := &GitInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Repo != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Repo = b.Repo
	}
	if b.Slug != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Slug = b.Slug
	}
	if b.Commit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Commit = b.Commit
	}
	if b.Tag != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Tag = b.Tag
	}
	if b.ExactTag != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_ExactTag = b.ExactTag
	}
	return m0
}

var File_github_com_dosquad_go_cliversion_version_proto protoreflect.FileDescriptor

const file_github_com_dosquad_go_cliversion_version_proto_rawDesc = "" +
	"\n" +
	".github.com/dosquad/go-cliversion/version.proto\x12\x12dosquad.cliversion\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"o\n" +
	"\vVersionInfo\x121\n" +
	"\x03bld\x18\x01 \x01(\v2\x1d.dosquad.cliversion.BuildInfoR\x05build\x12-\n" +
	"\x03git\x18\x02 \x01(\v2\x1b.dosquad.cliversion.GitInfoR\x03git\"\xa3\x01\n" +
	"\tBuildInfo\x12\x14\n" +
	"\x05debug\x18\x01 \x01(\bR\x05debug\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12.\n" +
	"\x04date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12\x1e\n" +
	"\n" +
	"go_version\x18\x05 \x01(\tR\n" +
	"go_version\"y\n" +
	"\aGitInfo\x12\x12\n" +
	"\x04repo\x18\x01 \x01(\tR\x04repo\x12\x12\n" +
	"\x04slug\x18\x02 \x01(\tR\x04slug\x12\x16\n" +
	"\x06commit\x18\x03 \x01(\tR\x06commit\x12\x10\n" +
	"\x03tag\x18\x04 \x01(\tR\x03tag\x12\x1c\n" +
	"\texact_tag\x18\x05 \x01(\tR\texact_tagB5Z+github.com/dosquad/go-cliversion;cliversion\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_github_com_dosquad_go_cliversion_version_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_dosquad_go_cliversion_version_proto_goTypes = []any{
	(*VersionInfo)(nil),           // 0: dosquad.cliversion.VersionInfo
	(*BuildInfo)(nil),             // 1: dosquad.cliversion.BuildInfo
	(*GitInfo)(nil),               // 2: dosquad.cliversion.GitInfo
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_github_com_dosquad_go_cliversion_version_proto_depIdxs = []int32{
	1, // 0: dosquad.cliversion.VersionInfo.bld:type_name -> dosquad.cliversion.BuildInfo
	2, // 1: dosquad.cliversion.VersionInfo.git:type_name -> dosquad.cliversion.GitInfo
	3, // 2: dosquad.cliversion.BuildInfo.date:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_dosquad_go_cliversion_version_proto_init() }
func file_github_com_dosquad_go_cliversion_version_proto_init() {
	if File_github_com_dosquad_go_cliversion_version_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_dosquad_go_cliversion_version_proto_rawDesc), len(file_github_com_dosquad_go_cliversion_version_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_dosquad_go_cliversion_version_proto_goTypes,
		DependencyIndexes: file_github_com_dosquad_go_cliversion_version_proto_depIdxs,
		MessageInfos:      file_github_com_dosquad_go_cliversion_version_proto_msgTypes,
	}.Build()
	File_github_com_dosquad_go_cliversion_version_proto = out.File
	file_github_com_dosquad_go_cliversion_version_proto_goTypes = nil
	file_github_com_dosquad_go_cliversion_version_proto_depIdxs = nil
}
